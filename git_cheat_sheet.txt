Git is a distrubed version control system (VCS)
It is distrubuted because each clone contains the entire version history.
This allows a central repository to be restored from a local clone, and via versa.
Developers can clone repostories, pull and push changes to eachother, and to a central repository.
Platforms like GitHub, BitBucket, AzureDevops etc. provide VCS servers,
for centralised git repos which users can clone, and work on locally.

Check your git version
    $ git --version

set your user details in order to commit changes. 
    $ git config --global user.name "nathanael joseph"
    $ git config --global user.email "nathanaeljy@outlook.com"

when in the root directory of a project, you can create a git repository using the command
    $ git init

Check which files have been staged, which have been commited, and which are not being tracked:
    $ git status

Add the unstaged files
    $ git add [filename]
You can add all files using
    $ git add *

to unstage a change, run
    $ git reset HEAD [filename]

Commit staged changes with 
    $ git commit -m "the commit message"
commit messages should follow the convention "this commit will [message]"
Staged changes are commited to the current branch, which is "master" by default.

to check the changes made
    $ git diff
to check the staged changes, use:
    $ git diff --staged

to remove a file from the working directory and stage the deletion:
    $ git rm [filename]
then commit the deletion.

Files can be moved from one folder to another, or renamed with:
    $ git mv [current filename] [new filename]
git mv will stage this change, and it can then be commited. 

To discard the changes made to an unstaged file, and revert it to the last commit, use:
    $ git checkout -- [filename]
this can also be used to restore a deleted file. 

See commit history using:
    $ git log
from here, you can copy the hash of commits for later use in git revert. 
(only the first 5 characters are required.)

To revert the project to a previous commit:
    $ git revert [commitSHA]
this will create a new commit. 

To revert to the last commit:
    $ git revert HEAD 

To make a copy of a local or remote repository, move to the folder you want to
clone it to and execute:
    $ git clone [repo directory/address] [name of clone]

When a repository is clones, the repository which it was cloned from si automatically 
added as the "origin" remote repository. 

to see the remote repositiories configured for the current repo, run:
    $ git remote

Add a remote repo:
    $ git remote add [name] [repository address]

Pull the latest commits from a remote repository:
    $ git pull [remote name] [branch name]
the remote name is origin by default, and for most cases, commits are pulled 
from the master branch
    $ git pull origin master

To push commitsa to a remote repository:
    $ git push [-u] [remote name] [branch name]
the [-u] parameter tells git to remeber this remote name and baranch, 
and set it as the default upstream. Afterwards, you can simply push commits using:
    $ git push









